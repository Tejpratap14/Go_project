package main

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// Book is the model for the books stored in the database
type Book struct {
	gorm.Model
	Title    string `json:"title"`
	Author   string `json:"author"`
	Genre    string `json:"genre"`
	Quantity int    `json:"quantity"`
}

// SetupRouter configures the Gin router with API endpoints
func SetupRouter() *gin.Engine {
	r := gin.Default()

	r.GET("/books", GetBooks)
	r.GET("/books/:id", GetBook)
	r.POST("/books", CreateBook)
	r.PUT("/books/:id", UpdateBook)
	r.DELETE("/books/:id", DeleteBook)

	return r
}

// GetBooks handles the GET request to retrieve all books
func GetBooks(c *gin.Context) {
	var books []Book
	db.Find(&books)

	c.JSON(http.StatusOK, gin.H{"data": books})
}

// GetBook handles the GET request to retrieve a specific book by ID
func GetBook(c *gin.Context) {
	id := c.Param("id")
	var book Book
	if err := db.Where("id = ?", id).First(&book).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Record not found!"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": book})
}

// CreateBook handles the POST request to create a new book
func CreateBook(c *gin.Context) {
	var input Book
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	db.Create(&input)

	c.JSON(http.StatusOK, gin.H{"data": input})
}

// UpdateBook handles the PUT request to update a specific book by ID
func UpdateBook(c *gin.Context) {
	id := c.Param("id")
	var book Book
	if err := db.Where("id = ?", id).First(&book).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Record not found!"})
		return
	}

	var input Book
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	db.Model(&book).Updates(input)

	c.JSON(http.StatusOK, gin.H{"data": book})
}

// DeleteBook handles the DELETE request to delete a specific book by ID
func DeleteBook(c *gin.Context) {
	id := c.Param("id")
	if err := db.Where("id = ?", id).Delete(&Book{}).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Record not found!"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": "Record deleted successfully"})
}

func main() {
	var err error

	// Connect to SQLite database
	db, err = gorm.Open(sqlite.Open("books.db"), &gorm.Config{})
	if err != nil {
		fmt.Println("Failed to connect to database:", err)
		return
	}

	// Auto Migrate the database
	db.AutoMigrate(&Book{})

	r := SetupRouter()

	// Run the server
	r.Run(":8080")
}
